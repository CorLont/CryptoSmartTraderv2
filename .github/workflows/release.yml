name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Validate version consistency
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        
        if [[ "$TAG_VERSION" != "$PACKAGE_VERSION" ]]; then
          echo "Version mismatch!"
          exit 1
        fi

    - name: Run quality gates
      run: |
        uv run pytest tests/ --cov=src/cryptosmarttrader --cov-fail-under=70 --tb=short
        uv run ruff check src/
        uv run mypy src/ --strict

  build-artifacts:
    name: Build Release Artifacts
    needs: validate-release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Build Python package
      run: uv build

    - name: Create deployment bundle
      run: |
        mkdir -p release-bundle/
        cp -r dist/ release-bundle/
        cp Dockerfile release-bundle/
        cp docker-compose.yml release-bundle/
        cp README*.md release-bundle/
        cp -r k8s/ release-bundle/ 2>/dev/null || true
        
        # Create deployment scripts
        cat > release-bundle/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "Deploying CryptoSmartTrader V2..."
        docker-compose up -d
        echo "Deployment complete!"
        EOF
        chmod +x release-bundle/deploy.sh

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ github.ref_name }}
        path: release-bundle/

  docker-build:
    name: Build Docker Images
    needs: validate-release
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: cryptosmarttrader
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [build-artifacts, docker-build]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-${{ github.ref_name }}
        path: release-bundle/

    - name: Create release archive
      run: |
        cd release-bundle/
        tar -czf ../cryptosmarttrader-${{ github.ref_name }}.tar.gz *
        cd ..
        zip -r cryptosmarttrader-${{ github.ref_name }}.zip release-bundle/

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## CryptoSmartTrader V2 Release ${{ github.ref_name }}
        
        ### ðŸš€ Enterprise Trading Intelligence System
        
        **Key Features:**
        - Multi-agent cryptocurrency trading intelligence
        - Enterprise go-live deployment system
        - Comprehensive risk management and safety systems
        - ML model registry with drift detection
        - Real-time observability and alerting
        
        **Deployment Options:**
        - Docker Compose (recommended)
        - Kubernetes manifests included
        - Replit deployment ready
        
        **Quick Start:**
        ```bash
        # Extract and deploy
        tar -xzf cryptosmarttrader-${{ github.ref_name }}.tar.gz
        cd release-bundle/
        ./deploy.sh
        ```
        
        **Documentation:**
        - README.md - Complete setup guide
        - README_QUICK_START.md - 1-minute deployment
        - README_OPERATIONS.md - Emergency procedures
        
        **System Requirements:**
        - Python 3.11+
        - Docker & Docker Compose
        - 4GB RAM minimum
        - Exchange API keys (Kraken recommended)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          cryptosmarttrader-${{ github.ref_name }}.tar.gz
          cryptosmarttrader-${{ github.ref_name }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}