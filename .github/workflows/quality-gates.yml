name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-gate:
    name: Lint Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: Ruff lint
        run: |
          uv run ruff check src/ tests/ --output-format=github
          if [ $? -ne 0 ]; then
            echo "‚ùå LINT GATE FAILED"
            exit 1
          fi
          echo "‚úÖ LINT GATE PASSED"

  format-gate:
    name: Format Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: Black format check
        run: |
          uv run black --check --diff src/ tests/
          if [ $? -ne 0 ]; then
            echo "‚ùå FORMAT GATE FAILED"
            exit 1
          fi
          echo "‚úÖ FORMAT GATE PASSED"

  type-gate:
    name: Type Gate
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: MyPy type check
        run: |
          uv run mypy src/ tests/ --strict --show-error-codes
          if [ $? -ne 0 ]; then
            echo "‚ùå TYPE GATE FAILED"
            exit 1
          fi
          echo "‚úÖ TYPE GATE PASSED"

  test-gate:
    name: Test Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: Run unit tests with coverage
        run: |
          uv run pytest tests/ \
            --cov=src/cryptosmarttrader \
            --cov-fail-under=70 \
            --cov-report=term-missing \
            -m "not slow and not integration" \
            --tb=short
          if [ $? -ne 0 ]; then
            echo "‚ùå TEST GATE FAILED"
            exit 1
          fi
          echo "‚úÖ TEST GATE PASSED"

  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: Generate coverage report
        run: |
          uv run pytest tests/ \
            --cov=src/cryptosmarttrader \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=70 \
            -m "not slow and not integration"
          
          COVERAGE=$(uv run coverage report --show-missing | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "‚ùå COVERAGE GATE FAILED: ${COVERAGE}% < 70%"
            exit 1
          fi
          echo "‚úÖ COVERAGE GATE PASSED: ${COVERAGE}%"

  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: uv sync --dev
        
      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false
        
      - name: Bandit security scan
        run: |
          uv run bandit -r src/ -f json
          if [ $? -ne 0 ]; then
            echo "‚ùå SECURITY GATE FAILED: Bandit found security issues"
            exit 1
          fi
          echo "‚úÖ SECURITY GATE PASSED: No security issues found"
        
      - name: pip-audit vulnerability scan
        run: |
          uv run pip-audit
          if [ $? -ne 0 ]; then
            echo "‚ùå SECURITY GATE FAILED: Vulnerabilities found"
            exit 1
          fi
          echo "‚úÖ SECURITY GATE PASSED: No vulnerabilities found"

  all-gates-summary:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [lint-gate, format-gate, type-gate, test-gate, coverage-gate, security-gate]
    if: always()
    steps:
      - name: Check all gates status
        run: |
          echo "üéØ QUALITY GATES SUMMARY"
          echo "========================"
          
          LINT_STATUS="${{ needs.lint-gate.result }}"
          FORMAT_STATUS="${{ needs.format-gate.result }}"
          TYPE_STATUS="${{ needs.type-gate.result }}"
          TEST_STATUS="${{ needs.test-gate.result }}"
          COVERAGE_STATUS="${{ needs.coverage-gate.result }}"
          SECURITY_STATUS="${{ needs.security-gate.result }}"
          
          echo "üîç Lint Gate: $LINT_STATUS"
          echo "üé® Format Gate: $FORMAT_STATUS"
          echo "üè∑Ô∏è Type Gate: $TYPE_STATUS"
          echo "üß™ Test Gate: $TEST_STATUS"
          echo "üìä Coverage Gate: $COVERAGE_STATUS"
          echo "üîí Security Gate: $SECURITY_STATUS"
          
          # Check if all gates passed
          if [[ "$LINT_STATUS" == "success" && \
                "$FORMAT_STATUS" == "success" && \
                "$TYPE_STATUS" == "success" && \
                "$TEST_STATUS" == "success" && \
                "$COVERAGE_STATUS" == "success" && \
                "$SECURITY_STATUS" == "success" ]]; then
            echo ""
            echo "‚úÖ ALL QUALITY GATES PASSED"
            echo "Repository is ready for deployment"
          else
            echo ""
            echo "‚ùå QUALITY GATE FAILURES DETECTED"
            echo "Fix issues before merging"
            exit 1
          fi