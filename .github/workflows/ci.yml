name: CryptoSmartTrader CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov
        pip install -e .

    - name: Run enhanced agent tests
      run: |
        pytest tests/test_enhanced_agents.py -v --cov=agents --cov=core

    - name: Run integration tests
      run: |
        pytest tests/test_agents.py -v

    - name: Test system health
      run: |
        python -c "
        from agents.enhanced_sentiment_agent import sentiment_agent
        from agents.enhanced_technical_agent import technical_agent
        from agents.enhanced_whale_agent import whale_agent
        from agents.enhanced_ml_agent import ml_agent
        from agents.enhanced_backtest_agent import backtest_agent
        from core.enhanced_orchestrator import orchestrator
        from core.order_book_analyzer import order_book_analyzer
        
        print('âœ… All enhanced agents imported successfully')
        
        # Test status endpoints
        agents = [
            ('Sentiment', sentiment_agent),
            ('Technical', technical_agent), 
            ('Whale', whale_agent),
            ('ML', ml_agent),
            ('Backtest', backtest_agent)
        ]
        
        for name, agent in agents:
            status = agent.get_status()
            assert status['status'] == 'operational'
            print(f'âœ… {name} Agent: {status[\"status\"]}')
        
        print('âœ… System health check passed')
        "

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: pyproject.toml

  performance-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Performance benchmarks
      run: |
        python -c "
        import asyncio
        import time
        from agents.enhanced_technical_agent import technical_agent
        from agents.enhanced_ml_agent import ml_agent
        import pandas as pd
        import numpy as np
        
        # Performance test: Technical analysis on multiple coins
        async def test_performance():
            coin_data = {}
            for i in range(10):
                dates = pd.date_range(start='2024-01-01', periods=100, freq='h')
                prices = 50000 + np.cumsum(np.random.randn(100) * 100)
                coin_data[f'COIN{i}/USD'] = pd.DataFrame({
                    'close': prices,
                    'high': prices * 1.02,
                    'low': prices * 0.98,
                    'volume': np.random.randint(1000, 10000, 100)
                }, index=dates)
            
            start_time = time.time()
            results = await technical_agent.analyze_multiple_coins(coin_data, ['1h'])
            duration = time.time() - start_time
            
            print(f'Technical analysis of 10 coins: {duration:.2f}s')
            assert duration < 10.0, f'Performance too slow: {duration}s'
            assert len(results) == 10
            
            print('âœ… Performance benchmarks passed')
        
        asyncio.run(test_performance())
        "

  deploy:
    needs: [test, security-scan, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying enhanced CryptoSmartTrader to production"
        echo "âœ… All tests passed - system ready for deployment"
        # In real scenario, this would deploy to production environment