name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.1.6'

jobs:
  lint-and-format:
    name: Code Linting & Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Install Dependencies
      run: |
        uv sync --dev --locked
    
    - name: Run Ruff Linting
      run: |
        uv run ruff check src/ tests/ --output-format=github
    
    - name: Run Ruff Formatting
      run: |
        uv run ruff format src/ tests/ --check
    
    - name: Run MyPy Type Checking
      run: |
        uv run mypy src/ --config-file=pyproject.toml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Install Dependencies
      run: |
        uv sync --dev --locked
    
    - name: Run Bandit Security Scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ --severity-level medium
    
    - name: Run Safety Security Check
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check --short-report
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
    
    - name: Install Dependencies
      run: |
        uv sync --dev --locked
    
    - name: Run Unit Tests
      run: |
        uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=html --cov-fail-under=70
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: false
        tags: cryptosmarttrader-v2:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    
    - name: Test Docker Container
      run: |
        docker run --name test-container -d \
          -p 5000:5000 \
          -e CRYPTOSMARTTRADER_ENV=test \
          cryptosmarttrader-v2:test
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Check container logs
        docker logs test-container
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-suite]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install Dependencies
      run: |
        uv sync --dev --locked
    
    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        CRYPTOSMARTTRADER_ENV: test
      run: |
        uv run pytest tests/ -m "integration" -v --tb=short

  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test-suite, docker-build, integration-tests]
    if: always()
    steps:
    - name: Check Quality Gates
      run: |
        echo "=== Quality Gates Summary ==="
        echo "Lint & Format: ${{ needs.lint-and-format.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Test Suite: ${{ needs.test-suite.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        
        # Fail if any critical job failed
        if [[ "${{ needs.lint-and-format.result }}" == "failure" || \
              "${{ needs.security-scan.result }}" == "failure" || \
              "${{ needs.test-suite.result }}" == "failure" || \
              "${{ needs.docker-build.result }}" == "failure" || \
              "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "❌ Quality gates failed!"
          exit 1
        else
          echo "✅ All quality gates passed!"
        fi

  deployment-ready:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deployment Readiness Validation
      run: |
        echo "=== Deployment Readiness Check ==="
        echo "✅ All quality gates passed"
        echo "✅ Branch: main"
        echo "✅ Event: push"
        echo "🚀 Ready for deployment!"
        
        # Create deployment artifact
        echo "DEPLOYMENT_READY=true" >> deployment.env
        echo "COMMIT_SHA=${{ github.sha }}" >> deployment.env
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%S%z)" >> deployment.env
    
    - name: Upload Deployment Artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-ready-${{ github.sha }}
        path: deployment.env
        retention-days: 30