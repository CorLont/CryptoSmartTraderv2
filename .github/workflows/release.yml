name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run full test suite
        run: uv run python run_test_suite.py

      - name: Run quality gates
        run: uv run python run_quality_gates.py

      - name: Validate version consistency
        run: |
          VERSION=$(uv run python -c "from src.cryptosmarttrader import __version__; print(__version__)")
          echo "Package version: $VERSION"
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            if [[ "$VERSION" != "$TAG_VERSION" ]]; then
              echo "❌ Version mismatch: package=$VERSION, tag=$TAG_VERSION"
              exit 1
            fi
          fi

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Build package
        run: |
          uv build
          ls -la dist/

      - name: Verify package
        run: |
          uv run pip install dist/*.whl
          uv run python -c "import cryptosmarttrader; print(f'✓ Package installed: v{cryptosmarttrader.__version__}')"

      - name: Generate release notes
        run: |
          echo "# CryptoSmartTrader V2 Release" > release-notes.md
          echo "" >> release-notes.md
          echo "## What's New" >> release-notes.md
          echo "" >> release-notes.md
          
          # Extract from CHANGELOG if it exists
          if [ -f CHANGELOG.md ]; then
            awk '/^## \[/{if(found) exit; found=1; next} found{print}' CHANGELOG.md >> release-notes.md
          else
            echo "- Enterprise-grade cryptocurrency trading intelligence platform" >> release-notes.md
            echo "- Advanced machine learning and risk management" >> release-notes.md
            echo "- Real-time market analysis and automated execution" >> release-notes.md
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            dist/
            release-notes.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync --frozen

      - name: Build documentation
        run: |
          # Create simple documentation site
          mkdir -p docs_site
          
          echo "# CryptoSmartTrader V2 Documentation" > docs_site/index.md
          echo "" >> docs_site/index.md
          echo "## Overview" >> docs_site/index.md
          cat README.md >> docs_site/index.md
          
          # Copy important documentation files
          cp ENTERPRISE_TEST_REPORT.md docs_site/
          cp SECURITY.md docs_site/ 2>/dev/null || echo "SECURITY.md not found"
          
          # Convert to HTML if possible
          if command -v pandoc &> /dev/null; then
            pandoc docs_site/index.md -o docs_site/index.html
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs_site