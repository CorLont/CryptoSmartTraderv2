name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

# Cancel duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync --all-extras --dev
      
    - name: Run safety check
      run: |
        uv run safety check \
          --json \
          --output safety-report.json \
          --continue-on-error || true
        uv run safety check --short-report
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        uv add pip-audit
        uv run pip-audit \
          --format=json \
          --output=pip-audit-report.json \
          --desc || true
        uv run pip-audit --desc
      continue-on-error: true
      
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  code-scanning:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync --all-extras --dev
      
    - name: Run bandit security linter
      run: |
        uv run bandit \
          -r core/ ml/ dashboards/ tests/ \
          -f json \
          -o bandit-report.json \
          -ll \
          --skip B101,B601 || true  # Skip assert and shell=True warnings
        uv run bandit \
          -r core/ ml/ dashboards/ tests/ \
          -f txt \
          -ll \
          --skip B101,B601
      continue-on-error: true
      
    - name: Run semgrep static analysis
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
      continue-on-error: true
      
    - name: Upload code scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-scan-results
        path: |
          bandit-report.json
          semgrep.sarif
        retention-days: 30
        
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  docker-security:
    name: Docker Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Dockerfile for scanning
      run: |
        cat > Dockerfile << EOF
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install uv
        COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv
        
        # Copy project files
        COPY pyproject.toml uv.lock ./
        COPY core/ ./core/
        COPY ml/ ./ml/
        COPY dashboards/ ./dashboards/
        
        # Install dependencies
        RUN uv sync --frozen --no-dev
        
        # Create non-root user
        RUN useradd --create-home --shell /bin/bash app
        USER app
        
        EXPOSE 5000
        CMD ["uv", "run", "streamlit", "run", "dashboards/main_dashboard.py", "--server.port", "5000"]
        EOF
        
    - name: Build Docker image
      run: docker build -t cryptosmarttrader:latest .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: cryptosmarttrader:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload Docker scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-scan
        path: trivy-results.sarif
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [secret-scanning, dependency-scanning, code-scanning, codeql-analysis]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "## Security Scanning Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scanning | ${{ needs.dependency-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Scanning | ${{ needs.code-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY