name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Secret detection with gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Security audit with pip-audit
      run: uv run pip-audit --requirement pyproject.toml --format=json --output=security-audit.json || true

    - name: Security scan with bandit
      run: uv run bandit -r src/ -f json -o bandit-report.json || true

    - name: Vulnerability scanning with OSV
      run: uv run osv-scanner --lockfile=uv.lock --format=json --output=osv-report.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-audit.json
          bandit-report.json
          osv-report.json

  test:
    name: Test Suite
    needs: security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run unit tests
      run: uv run pytest tests/unit/ -v --tb=short --cov=src --cov-fail-under=70

    - name: Run integration tests
      run: uv run pytest tests/integration/ -v --tb=short

    - name: Run E2E smoke tests
      run: uv run pytest tests/e2e/ -v --tb=short -m smoke

    - name: Generate coverage report
      run: uv run pytest --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  quality:
    name: Code Quality
    needs: security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Lint with ruff
      run: uv run ruff check src/ tests/ --output-format=github

    - name: Format check with ruff
      run: uv run ruff format --check src/ tests/

    - name: Type check with mypy
      run: uv run mypy src/ --strict --show-error-codes

    - name: Import sorting check
      run: uv run ruff check --select I src/ tests/

  docs:
    name: Documentation
    needs: security
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Check documentation build
      run: |
        echo "Documentation check passed"
        # Future: Add sphinx or mkdocs build

  deploy:
    name: Deploy
    if: github.event_name == 'release'
    needs: [test, quality, docs]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Build distribution
      run: uv build

    - name: Validate version
      run: |
        VERSION=$(uv run python -c "from src.cryptosmarttrader.__init__ import __version__; print(__version__)")
        echo "Version: $VERSION"
        if [[ "$VERSION" != "${{ github.event.release.tag_name }}" ]]; then
          echo "Version mismatch: $VERSION != ${{ github.event.release.tag_name }}"
          exit 1
        fi

    - name: Create deployment artifact
      run: |
        mkdir deployment/
        cp -r dist/ deployment/
        cp Dockerfile deployment/
        cp docker-compose.yml deployment/
        cp -r k8s/ deployment/ 2>/dev/null || true

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-${{ github.event.release.tag_name }}
        path: deployment/