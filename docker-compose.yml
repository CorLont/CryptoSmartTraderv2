version: '3.8'

services:
  # Main CryptoSmartTrader V2 Application
  cryptosmarttrader:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cryptosmarttrader-v2
    restart: unless-stopped
    ports:
      - "5000:5000"  # Main dashboard
      - "8001:8001"  # API server
      - "8000:8000"  # Metrics server
    environment:
      - CRYPTOSMARTTRADER_ENV=production
      - CRYPTOSMARTTRADER_LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://cryptosmarttrader:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/cryptosmarttrader
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./exports:/app/exports
    depends_on:
      - postgres
      - redis
    networks:
      - cryptosmarttrader-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cryptosmarttrader-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cryptosmarttrader
      - POSTGRES_USER=cryptosmarttrader
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - cryptosmarttrader-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cryptosmarttrader -d cryptosmarttrader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cryptosmarttrader-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cryptosmarttrader-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cryptosmarttrader-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - cryptosmarttrader-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cryptosmarttrader-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - cryptosmarttrader-network

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: cryptosmarttrader-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - cryptosmarttrader-network

networks:
  cryptosmarttrader-network:
    driver: bridge
    name: cryptosmarttrader-network

volumes:
  postgres_data:
    name: cryptosmarttrader-postgres-data
  redis_data:
    name: cryptosmarttrader-redis-data
  prometheus_data:
    name: cryptosmarttrader-prometheus-data
  grafana_data:
    name: cryptosmarttrader-grafana-data
  alertmanager_data:
    name: cryptosmarttrader-alertmanager-data