name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Security scanning job runs first and fastest
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run pip-audit security scan
        run: uv run pip-audit --format=json --output=security-report.json

      - name: Run Bandit security scan
        run: uv run bandit -r src/ -f json -o bandit-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            bandit-report.json

  # Build and test matrix
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: security
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install dependencies
        run: uv sync --frozen

      - name: Verify installation
        run: |
          uv run python --version
          uv run python -c "import sys; print(f'Python {sys.version}')"

      - name: Lint with Ruff
        run: |
          uv run ruff check src/ --output-format=github
          uv run ruff format src/ --check

      - name: Type check with MyPy
        run: uv run mypy src/cryptosmarttrader/ --ignore-missing-imports

      - name: Run unit tests with coverage
        run: |
          uv run pytest tests/unit/ \
            --cov=src/cryptosmarttrader \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --junit-xml=test-results.xml \
            -v

      - name: Run integration tests
        run: |
          uv run pytest tests/integration/ \
            --junit-xml=integration-results.xml \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            integration-results.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Store uv cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}

  # Quality gates
  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run build quality gates
        run: uv run python run_quality_gates.py

      - name: Package installation test
        run: |
          uv build
          uv run pip install dist/*.whl
          uv run python -c "import cryptosmarttrader; print('✓ Package installation successful')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # Documentation and final validation
  docs:
    name: Documentation & Validation
    runs-on: ubuntu-latest
    needs: [security, test, quality]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync --frozen

      - name: Generate documentation
        run: |
          # Generate API documentation if sphinx is available
          if uv run python -c "import sphinx" 2>/dev/null; then
            uv run sphinx-build -b html docs/ docs/_build/
          else
            echo "Sphinx not available, skipping documentation generation"
          fi

      - name: Validate configuration files
        run: |
          # Validate pyproject.toml
          uv run python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"
          echo "✓ pyproject.toml is valid"
          
          # Validate pytest configuration
          uv run pytest --collect-only > /dev/null
          echo "✓ pytest configuration is valid"

      - name: Final system health check
        run: |
          uv run python -c "
          import sys
          from src.cryptosmarttrader import __version__
          print(f'✓ CryptoSmartTrader v{__version__} - Python {sys.version_info.major}.{sys.version_info.minor}')
          print('✓ All systems operational')
          "

# Concurrency control to cancel old runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true