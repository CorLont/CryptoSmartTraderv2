name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
        
    - name: Install dependencies
      run: uv sync --frozen
      
    - name: Run ruff check (linting)
      run: uv run ruff check --output-format=github .
      
    - name: Run ruff format check
      run: uv run ruff format --check .
      
    - name: Run mypy type checking
      run: uv run mypy src/ --strict --ignore-missing-imports --no-error-summary
      
    - name: Run bandit security scan
      run: uv run bandit -r src/ -f json -o bandit-report.json || true
      
    - name: Run pip-audit security scan
      run: uv run pip-audit --format=json --output=pip-audit-report.json || true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: "*-report.json"

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
        
    - name: Install dependencies
      run: uv sync --frozen
      
    - name: Run tests with coverage
      run: |
        uv run pytest \
          --cov=src/cryptosmarttrader \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=70 \
          --maxfail=1 \
          --strict-markers \
          -v
          
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-security, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cryptosmarttrader:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm cryptosmarttrader:${{ github.sha }} python -c "import src.cryptosmarttrader; print('Package imports successfully')"