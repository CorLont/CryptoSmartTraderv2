name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        uv sync --frozen
        
    - name: Lint with Ruff
      run: |
        uv run ruff check . --output-format=github
        
    - name: Format check with Black
      run: |
        uv run black --check --diff .
        
    - name: Type check with MyPy
      run: |
        uv run mypy src/ --ignore-missing-imports --show-error-codes
        
    - name: Security scan with Bandit
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -ll
        
    - name: Dependency vulnerability scan
      run: |
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        uv run pip-audit --desc --summary

  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        uv sync --frozen
        
    - name: Run unit tests
      run: |
        uv run pytest tests/ -m "unit" -v --junitxml=unit-test-results.xml
        
    - name: Run integration tests
      run: |
        uv run pytest tests/ -m "integration" -v --junitxml=integration-test-results.xml
        
    - name: Run test suite with coverage
      run: |
        uv run pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=70 \
          --junitxml=test-results.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          unit-test-results.xml
          integration-test-results.xml
          htmlcov/
          
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          pip-audit-report.json

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/uv.lock') }}
        
    - name: Install dependencies
      run: |
        uv sync --frozen
        
    - name: Build package
      run: |
        uv build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: cryptosmarttrader:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm --name test-container \
          -e ENVIRONMENT=testing \
          cryptosmarttrader:latest \
          python -c "import src.cryptosmarttrader; print('Package import successful')"

  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Validate deployment readiness
      run: |
        echo "âœ… Quality checks passed"
        echo "âœ… Test suite passed with >70% coverage"
        echo "âœ… Security scans completed"
        echo "âœ… Package built successfully"
        echo "âœ… Docker image built successfully"
        echo "ðŸš€ Ready for deployment to staging/production"
        
    - name: Create deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** âœ… Ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "**Artifacts:** Package + Docker image available" >> $GITHUB_STEP_SUMMARY