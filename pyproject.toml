[project]
name = "cryptosmarttrader"
version = "2.0.0"
description = "Enterprise Cryptocurrency Trading Intelligence Platform"
authors = [
    {name = "CryptoSmartTrader Team", email = "team@cryptosmarttrader.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["cryptocurrency", "trading", "machine-learning", "ai", "fintech"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "agents>=1.4.0",
    # Core dependencies
    "aiofiles>=23.0.0",
    "aiohttp>=3.9.0",
    "anyio>=4.10.0",
    "asyncio-throttle>=1.0.0",
    "ccxt>=4.0.0",
    "coverage>=7.0.0",
    "dependency-injector>=4.41.0",
    "fastapi>=0.116.1",
    "httpx>=0.25.0",
    "hvac>=2.0.0",
    "joblib>=1.5.1",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-json-logger>=2.0.0",
    "requests>=2.32.4",
    "respx>=0.20.0",
    "schedule>=1.2.0",
    "scikit-learn>=1.7.1",
    "sendgrid>=6.12.4",
    "setproctitle>=1.3.0",
    "slack-sdk>=3.36.0",
    "streamlit>=1.29.0",
    "tenacity>=8.2.0",
    "textblob>=0.17.0",
    "uvicorn>=0.35.0",
    "xgboost>=3.0.3",
]

[project.optional-dependencies]
# Machine Learning dependencies
ml = [
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "torch>=2.1.0",
    "transformers>=4.30.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.88.0",
    "freezegun>=1.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
]

# Performance and optimization
performance = [
    "cupy>=12.0.0",
    "numba>=0.58.0",
    "joblib>=1.3.0",
]

# Production monitoring
monitoring = [
    "sentry-sdk>=1.38.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

# All extras combined
all = [
    "cryptosmarttrader[ml,dev,performance,monitoring]"
]

[project.urls]
Homepage = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2"
Documentation = "https://docs.cryptosmarttrader.com"
Repository = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2"
Issues = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2/issues"
Changelog = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2/blob/main/CHANGELOG.md"

[project.scripts]
cryptotrader = "cryptosmarttrader.api.main:main"
cst-test = "scripts.run_tests:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.88.0",
    "freezegun>=1.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["core", "ml", "dashboards", "tests"]
skip_glob = ["**/migrations/*", "**/.venv/*", "**/venv/*"]
known_first_party = ["core", "ml", "dashboards"]
known_third_party = ["streamlit", "pandas", "numpy", "plotly", "ccxt", "pydantic"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "ccxt.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "streamlit.*"
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Access to protected member
    "C0301",  # Line too long (handled by black)
    "R0801",  # Similar lines in files
]

[tool.pylint.format]
max-line-length = 100

# Coverage configuration
[tool.coverage.run]
source = ["core", "ml", "dashboards"]
omit = [
    "tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "conftest.py",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"
title = "CryptoSmartTrader V2 Test Coverage"

[tool.coverage.xml]
output = "coverage.xml"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring external services",
    "api_key: marks tests requiring API keys or external authentication",
    "property: marks property-based tests using Hypothesis",
    "unit: marks unit tests (fast, isolated tests)",
    "smoke: marks smoke tests for basic functionality",
    "regression: marks regression tests for previously fixed bugs",
    "performance: marks performance/benchmark tests",
    "ml: marks machine learning related tests",
    "trading: marks trading logic tests",
    "temporal: marks temporal validation tests",
    "dashboard: marks Streamlit dashboard tests",
    "security: marks security and authentication tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*Use 'pytest.importorskip.*:pytest.PytestRemovedWarning",
]
asyncio_mode = "auto"
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
