[project]
name = "cryptosmarttrader"
version = "2.0.0"
description = "Enterprise Cryptocurrency Trading Intelligence Platform"
authors = [
    {name = "CryptoSmartTrader Team", email = "team@cryptosmarttrader.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["cryptocurrency", "trading", "machine-learning", "ai", "fintech"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies
    "aiofiles>=23.0.0",
    "aiohttp>=3.9.0",
    "anthropic>=0.63.0",
    "anyio>=4.10.0",
    "asyncio-throttle>=1.0.0",
    "ccxt>=4.0.0",
    "dependency-injector>=4.41.0",
    "fastapi>=0.116.1",
    "google-genai>=1.29.0",
    "httpx>=0.25.0",
    "hvac>=2.0.0",
    "joblib>=1.5.1",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-json-logger>=2.0.0",
    "requests>=2.32.4",
    "respx>=0.20.0",
    "schedule>=1.2.0",
    "scikit-learn>=1.7.1",
    "sendgrid>=6.12.4",
    "setproctitle>=1.3.0",
    "slack-sdk>=3.36.0",
    "streamlit>=1.29.0",
    "tenacity>=8.2.0",
    "textblob>=0.17.0",
    "uvicorn>=0.35.0",
    "xgboost>=3.0.3",
]

[project.optional-dependencies]
# Machine Learning dependencies
ml = [
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "torch>=2.1.0",
    "transformers>=4.30.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "hypothesis>=6.88.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",
    "black>=24.0.0",
]

# Performance and optimization
performance = [
    "cupy>=12.0.0",
    "numba>=0.58.0",
    "joblib>=1.3.0",
]

# Production monitoring
monitoring = [
    "sentry-sdk>=1.38.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

# All extras combined
all = [
    "cryptosmarttrader[ml,dev,performance,monitoring]"
]

[project.urls]
Homepage = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2"
Documentation = "https://docs.cryptosmarttrader.com"
Repository = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2"
Issues = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2/issues"
Changelog = "https://github.com/cryptosmarttrader/cryptosmarttrader-v2/blob/main/CHANGELOG.md"

[project.scripts]
cryptotrader = "cryptosmarttrader.api.main:main"
cst-test = "scripts.run_tests:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/cryptosmarttrader"]

# Tool configurations for Fase 1 CI/CD
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--maxfail=1",
    "--tb=short",
    "-ra",
    "--cov=src/cryptosmarttrader",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Fast unit tests",
    "integration: Integration tests with external services", 
    "slow: Slow tests (>1s)",
    "api: API endpoint tests",
    "ml: Machine learning tests",
    "trading: Trading system tests",
    "security: Security-related tests",
    "performance: Performance benchmarks"
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Exclude problematic directories
exclude = [
    "^attached_assets/.*",
    "^exports/.*", 
    "^__pycache__/.*",
    "^.cache/.*"
]

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "ta.*", 
    "plotly.*",
    "streamlit.*",
    "anthropic.*",
    "openai.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "attached_assets", "exports", ".cache"]
skips = ["B101"]  # Allow assert in tests

[tool.coverage.run]
source = ["src/cryptosmarttrader"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/attached_assets/*",
    "*/exports/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "black>=25.1.0",
    "mypy>=1.17.1",
    "pip-audit>=2.9.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.8",
]
