1) Code‑controle op fouten (en directe fixes)
Wat je UI verraadt:

“GEEN GETRAINDE MODELLEN” in AI Voorspellingen ⇒ predictor/trainer ontbreekt of modellenpad leeg.

“TOP KOOP KANSEN” toont 15 opportunities terwijl Strict mode ≥80% aan staat en er geen modellen zijn ⇒ backend‑gate ontbreekt/wordt genegeerd.

Sidebar “System Online” is groen terwijl er geen modellen zijn ⇒ Ready ≠ Online.

Minimal‑fixes (drop‑in)

1.1 Hard readiness‑gate in de app
python
Kopiëren
Bewerken
# app_readiness.py (importeer in je Streamlit paginas)
from pathlib import Path
import time, json

def _fresh(p, max_age=24*3600):
    try: return Path(p).exists() and time.time() - Path(p).stat().st_mtime < max_age
    except: return False

def check_readiness():
    horizons = ["1h","24h","168h","720h"]
    models = all(Path(f"models/saved/rf_{h}.pkl").exists() for h in horizons)
    features_ok = _fresh("exports/features.parquet")
    latest = Path("logs/daily/latest.json")
    health = (json.loads(latest.read_text()).get("health_score",0) if latest.exists() else 0)
    ready = models and features_ok and health >= 85
    return ready, {"models":models,"features":features_ok,"health":health}
In elke tab:

python
Kopiëren
Bewerken
import streamlit as st
from app_readiness import check_readiness
ready, parts = check_readiness()
if not parts["models"]:
    st.error("⚠️ Geen getrainde modellen. Tab uitgeschakeld."); st.stop()
1.2 Strict 80% confidence server‑side afdwingen
python
Kopiëren
Bewerken
# orchestration/strict_gate.py
import pandas as pd
def strict_filter(df: pd.DataFrame, pred="pred_720h", conf="conf_720h", thr=0.80):
    if df is None or df.empty or pred not in df or conf not in df: return pd.DataFrame()
    df = df.dropna(subset=[pred, conf])
    return df[df[conf] >= thr].sort_values(pred, ascending=False).reset_index(drop=True)
In je API/Streamlit‑backend altijd eerst strict_filter() toepassen. Is leeg → UI toont niets.

1.3 Baseline trainer + predictor (zodat er vandaag modellen zijn)
python
Kopiëren
Bewerken
# ml/train_baseline.py
import pandas as pd, joblib, os
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import TimeSeriesSplit

H = {"1h":"target_1h","24h":"target_24h","168h":"target_168h","720h":"target_720h"}

def train_one(df, tgt, feats, n=5):
    X, y = df[feats].values, df[tgt].values
    tscv = TimeSeriesSplit(n_splits=5)
    models=[]
    for seed in range(n):
        m = RandomForestRegressor(n_estimators=400, random_state=seed, n_jobs=-1)
        train_idx, _ = list(tscv.split(X))[-1]    # laatste split = OOS
        m.fit(X[train_idx], y[train_idx]); models.append(m)
    return models

if __name__ == "__main__":
    fx = pd.read_parquet("exports/features.parquet")
    feats = [c for c in fx if c.startswith("feat_")]
    os.makedirs("models/saved", exist_ok=True)
    for h,tgt in H.items():
        sub = fx.dropna(subset=feats+[tgt])
        joblib.dump(train_one(sub,tgt,feats), f"models/saved/rf_{h}.pkl")
        print("saved models/saved/rf_%s.pkl" % h)
python
Kopiëren
Bewerken
# ml/models/predict.py
import pandas as pd, numpy as np, joblib, glob
H = ["1h","24h","168h","720h"]

def predict_all(features: pd.DataFrame) -> pd.DataFrame:
    out = features[["coin","timestamp"]].copy()
    X = features[[c for c in features if c.startswith("feat_")]].values
    for h in H:
        path = f"models/saved/rf_{h}.pkl"
        if not glob.glob(path): continue
        ens = joblib.load(path)
        preds = np.column_stack([m.predict(X) for m in ens])
        mu, sigma = preds.mean(1), preds.std(1) + 1e-9
        out[f"pred_{h}"], out[f"conf_{h}"] = mu, 1.0/(1.0+sigma)   # simpele uncertainty
    return out
1.4 Data‑hygiëne: look‑ahead, NaN, UTC
Run vóór trainen:

python
Kopiëren
Bewerken
# tests/test_data_sanity.py
import pandas as pd
fx = pd.read_parquet("exports/features.parquet")
assert fx['timestamp'].dt.tz is not None, "Timestamps moeten UTC zijn"
assert (fx['timestamp'] == fx['timestamp'].dt.floor('1H')).all(), "Niet op 1H candlesticks"
req = ["feat_sent_score","feat_whale_score","feat_rsi_14","feat_vol_24h"]
assert fx[req].notna().all().all(), "NaN in verplichte features → skippen"
q99 = fx['target_720h'].abs().quantile(0.99); assert q99 < 3.0, f"Targetschaal verdacht ({q99})"