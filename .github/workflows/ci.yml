name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install Dependencies
      run: |
        uv sync --dev
    
    - name: Run Bandit Security Scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json
        uv run bandit -r src/ --severity-level medium
    
    - name: Run Safety Security Check
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    name: Code Quality Gates
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install Dependencies
      run: |
        uv sync --dev
    
    - name: Run Ruff Linting
      run: |
        uv run ruff check src/ tests/ --output-format=github
    
    - name: Run Black Formatting Check
      run: |
        uv run black --check --diff src/ tests/
    
    - name: Run MyPy Type Checking
      run: |
        uv run mypy src/ --ignore-missing-imports --show-error-codes

  testing:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install Dependencies
      run: |
        uv sync --dev
    
    - name: Run Unit Tests
      run: |
        uv run pytest tests/ -v --tb=short --maxfail=5 \
          --cov=src --cov-report=xml --cov-report=term-missing \
          --cov-fail-under=70 \
          -m "not slow and not integration"
    
    - name: Run Integration Tests
      run: |
        uv run pytest tests/ -v --tb=short \
          -m "integration" || true
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, testing]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager  
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Validate Package Build
      run: |
        uv sync
        uv build
    
    - name: Test Package Installation
      run: |
        pip install dist/*.whl
        python -c "import src.cryptosmarttrader; print('Package import successful')"
    
    - name: Docker Build Test
      run: |
        docker build -t cryptosmarttrader:test .
        docker run --rm cryptosmarttrader:test python -c "print('Docker build successful')"

  performance-tests:
    name: Performance Validation  
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV Package Manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install Dependencies
      run: |
        uv sync --dev
    
    - name: Run Performance Tests
      run: |
        uv run pytest tests/ -v -m "performance" \
          --benchmark-only --benchmark-json=benchmark.json || true
    
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: benchmark.json

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Deployment Configuration Check
      run: |
        # Verify required configuration files exist
        test -f Dockerfile
        test -f docker-compose.yml
        test -f .env.example
        test -f pyproject.toml
        echo "✅ All deployment files present"
    
    - name: Health Check Validation
      run: |
        # Verify health endpoints are implemented
        grep -r "health" src/ || echo "⚠️  Health endpoints should be implemented"
        grep -r "/health" src/ || echo "⚠️  HTTP health endpoints should be implemented"
    
    - name: Metrics Endpoint Validation
      run: |
        # Verify metrics endpoints exist
        grep -r "metrics" src/ || echo "⚠️  Metrics endpoints should be implemented"
        grep -r "prometheus" src/ || echo "⚠️  Prometheus metrics should be implemented"
    
    - name: Security Configuration Check
      run: |
        # Verify no secrets in code
        ! grep -r "sk-" src/ || (echo "❌ API keys found in code" && exit 1)
        ! grep -r "password.*=" src/ || (echo "❌ Passwords found in code" && exit 1)
        ! grep -r "secret.*=" src/ || (echo "❌ Secrets found in code" && exit 1)
        echo "✅ No hardcoded secrets found"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, testing, build-validation]
    if: always()
    steps:
    - name: Check Quality Gate Status
      run: |
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan failed"
          exit 1
        fi
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.testing.result }}" != "success" ]]; then
          echo "❌ Test suite failed"
          exit 1
        fi
        
        if [[ "${{ needs.build-validation.result }}" != "success" ]]; then
          echo "❌ Build validation failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed"
    
    - name: Generate Quality Report
      run: |
        cat << EOF > quality-report.md
        # Quality Gate Report
        
        ## Status: ✅ PASSED
        
        - ✅ Security Scan: ${{ needs.security-scan.result }}
        - ✅ Code Quality: ${{ needs.code-quality.result }}  
        - ✅ Testing: ${{ needs.testing.result }}
        - ✅ Build Validation: ${{ needs.build-validation.result }}
        
        ## Deployment Ready: $(if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then echo "YES"; else echo "PENDING"; fi)
        
        Generated: $(date -u)
        Commit: ${{ github.sha }}
        EOF
        
        cat quality-report.md
    
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-gate-report
        path: quality-report.md