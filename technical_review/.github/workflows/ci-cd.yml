name: CryptoSmartTrader CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pytest pytest-cov
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Run Black (Code Formatting)
      run: black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (Linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run Flake8 (Style Check)
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run MyPy (Type Checking)
      run: mypy . --ignore-missing-imports --no-strict-optional

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (Security Linting)
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety (Dependency Security Check)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock
        pip install -r requirements.txt || echo "No requirements.txt found"
        # Install project dependencies
        pip install streamlit pandas numpy plotly ccxt scikit-learn xgboost
        pip install textblob schedule prometheus-client psutil
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install streamlit pandas numpy plotly ccxt scikit-learn xgboost
        pip install textblob schedule prometheus-client psutil pytest
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v
    
    - name: Test application startup
      run: |
        timeout 30s streamlit run app.py --server.headless true --server.port 8501 &
        sleep 20
        curl -f http://localhost:8501/_stcore/health || exit 1

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install streamlit pandas numpy plotly ccxt scikit-learn xgboost
        pip install textblob schedule prometheus-client psutil pytest memory-profiler
    
    - name: Run performance tests
      run: |
        python -m pytest tests/test_performance.py -v

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, integration-test, performance-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build application package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Create deployment artifacts
      run: |
        mkdir -p deployment/
        cp -r core/ deployment/
        cp -r dashboards/ deployment/
        cp -r agents/ deployment/
        cp -r utils/ deployment/
        cp app.py deployment/
        cp containers.py deployment/
        cp config.json deployment/
        cp requirements.txt deployment/ || echo "requirements.txt not found"
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/
    
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "- Build Date: $(date)" >> deployment-report.md
        echo "- Commit: ${{ github.sha }}" >> deployment-report.md
        echo "- Branch: ${{ github.ref_name }}" >> deployment-report.md
        echo "- Python Version: ${{ env.PYTHON_VERSION }}" >> deployment-report.md
        echo "- Tests Passed: ✅" >> deployment-report.md
        echo "- Security Scan: ✅" >> deployment-report.md
        echo "- Code Quality: ✅" >> deployment-report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ CryptoSmartTrader CI/CD Pipeline completed successfully"
        echo "Deployment package ready for production release"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CryptoSmartTrader CI/CD Pipeline failed"
        echo "Please check the failed jobs and fix issues before merging"